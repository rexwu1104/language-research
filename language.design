# functional
--- first and high level function
    --- default option in function is `static` and `pure`
--- pure function
    --- pure function cannot have any 'side effect'
--- side effect
    --- there have `effect` keyword to define effect state

```
effect IO_effect(io)

fn log format_str %format_args -> Unit IO_effect {
    printf(format_str, %format_args)
}
```

# command and procedure
--- abstract for asm
    --- command list
--- 4 sentences
    --- operate, loop, condition branch and non-condition branch

```
type Point {
    x: u16
    y: u16
}

// operate
fn `+` left right -> Point {
    left + right
}

a = Point.new
b = Point.new

a + b

// loop
times = 0
loop {
    times ++
    printf("hello world")
    if times == 10 break
}

times = 0
while times != 10 {
    times ++
    printf("hello world")
}

for times = 0; 10; ++ {
    printf("hello world")
}

// condition branch
test_num = 0
a = test_num if test_num > 0 else 1 // a = 1
a = if test_num > 0 { test_num } else { 1 } // a = 1
a = if test_num > 0 { test_num } // a = 0 (a = i32.new)

// non-condition branch
fn add a b -> default {
    a + b
}

add 10 20 // 30

// while (a--)
// `goto` is experimental
a = 10
@loop_start
if !a goto @loop_end
a --
goto @loop_start
@loop_end
```

# OOP
--- object is instance for class
--- class is abstract of things
--- message send by method, signals and data packets
--- encapsulation means you dont need to know how to implement, just need know methods
--- inherit class have porperty and method of the inherited class
--- OOP has two type, base-prototype and base-class
--- base-prototype sometimes use delegate

```
// class
type Point {
    x: u32
    y: u32
}

impl Point {
    fn new x=0 y=0 -> default {
        default.new
    }

    fn length_by point -> default {
        sqrt((this.x - point.x) ** 2 + (this.y - point.y) ** 2)
    }
}

p = Point.new
p.length_by Point.new 1 1 // sqrt 2

type TDPoint inherit Point {
    z: u32
}

impl TDPoint {
    fn new x=0 y=0 z=0 -> default {
        default.new
    }

    fn length_by point -> default {
        sqrt((this.x - point.x) ** 2 + (this.y - point.y) ** 2 + (this.z - point.z) ** 2)
    }
}

a = Reflect.new Point // Point { x: 0 y: 0 }
```

# logical
--- professor system will find answer in model
--- automated theorem proving will generate theorem auotmaticlly to expand existing theory

```
fn sort array -> default {
    fact ordered =
        | []
        | [x]
        | [x, y, %z]: x < y

    ordered array
}

a = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
a = sort a // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
```