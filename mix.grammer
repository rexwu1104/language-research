Statement
    ::= Import_Package
    ::= Define_Type
    ::= Define_Function

Import_Package ::= "use" Package_Path
Package_Path ::= Identifier ("." Identifier)*

Define_Type ::= "type" Generic_Template* Type_Name Type_Block
Type_Name ::= Identifier
Type_Block ::= "{" Type_Column* "}"
Type_Column ::= Identifier ":" Identifier

Define_Function ::= "fn" Generic_Template* Function_Name Function_Paramter ("->" Function_Return_Type)* Function_Type_Setting* Function_Block
Function_Name
    ::= Atom
    ::= Identifier
Function_Paramter ::= Paramter*
Function_Return_Type ::= Identifier
Function_Type_Setting ::= "where" Function_Type_Column+
Function_Type_column ::= Identifier ":" Identifier
Function_Block ::= "{" Function_Statement* "}"
Function_Statement
    ::= Define_Variable
    ::= Define_Closure
    ::= Define_Fact
    ::= Call_Function
    ::= Loop_Use
    ::= Condition

Define_Variable ::= Identifier "=" Value
Define_Closure ::= Define_Function
Define_Fact ::= "fact" Identifier ("|" Fact_Check)+
Call_Function ::= Value Value*
Loop_Use
    ::= For_Loop
    ::= While_Loop
    ::= True_Loop
    ::= Foreach_Loop
Condition ::= If_Condition Elif_Condition* Else_Condition

Fact_Check ::= Fact_State (":" Fact_Condition)*
Fact_State
    ::= Fact_Array_State
    ::= Fact_Simple_State
    ::= Fact_Struct_State
Fact_Array_State ::= "[" (Paramter ("," Paramter)*)* "]"
Fact_Simple_State ::= Constant_Value
Fact_Struct_State ::= Identifier "{" Identifier* "}"
Fact_Condition ::= Value

Constant_Value
    ::= String
    ::= Char
    ::= Atom
    ::= Number
Value
    ::= Constant_Value
    ::= Identifier
    ::= Array
    ::= Struct
    ::= "(" Value ")"
Array ::= "[" (Value ("," Value)*)* "]"
Struct ::= Identifier* "{" Struct_Column_Pair* "}"
Struct_Column_Pair ::= Identifier (":" Value)*

For_Loop ::= "for" For_Setup_Statement ";" For_Condition_Statement ";" For_Step_Statement "{" For_Statement* "}"
For_Setup_Statement ::= Define_Variable
For_Condition_Statement ::= Value
For_Step_Statement ::= Value
For_Statement ::= Function_Statement

While_Loop ::= "while" While_Condition_Statement "{" While_Statement* "}"
While_Condition_Statement ::= Value
While_Statement ::= Function_Statement

True_Loop ::= "loop" "{" Loop_Statement* "}"
Loop_Statement ::= Function_Statement

Foreach_Loop ::= "for" Foreach_Loop_Paramter "in" Value "{" For_Statement* "}"
Foreach_Loop_Paramter ::= Function_Paramter

If_Condition ::= "if" Value "{" Condition_Statement "}"
Elif_Condition ::= "elif" Value "{" Condition_Statement "}"
Else_Condition ::= "else" "{" Condition_Statement "}"
Condition_Statement ::= Function_Statement